/* Author:

*/
var ltie9 = false;
$(function() {
	ltie9 = ($('html').hasClass('lt-ie9')) ? true : false;
	$('img.circle').circleIMG(); // круглые картинки
	$('.blogcarousel').blogcarousel();
	$('.js-loadmore').loadMore(); //загрузить еще

}); // DOM loaded

$(window).load(function(){ });



(function($) { //create closure
$.fn.cleanWS = function(options){
	this.each(function(){
		var container = this, nodes = container.childNodes;
		var i = nodes.length-1;
		while (i>-1) { 
			if (nodes[i].nodeType == 3) container.removeChild(nodes[i]);
			i--;
		}
	});
}
//end of closure
})(jQuery);

(function($) { //create closure
$.fn.heightAdjustment = function(options){
	this.each(function(){
		var H = 0, el = $(this).children();
		el.height('').removeClass('evenlyready');
		el.each(function(){
			H = Math.max(H, $(this).height());
		});
		el.height(H).addClass('evenlyready');
	});
}
//end of closure
})(jQuery);


(function($) { //create closure
$.fn.circleIMG = function(options){
// оборачивает выбранные картинки в span
// для modern browser будет использоваться border-radius, для old ie - маска-картинка
// маска описывается в style.css в классах cw_'+w+'x'+h+':
	this.each(function(){
		var img = $(this);
		if (ltie9) {
					$(window).load(function(){
			img.wrap(function() {
						var h = img.height(), w = img.width();
						var cls = img.attr('class').replace('circle','');
						img.css({'border-radius': h/2+'px'});
						img.attr('class', 'circle');
						return '<span class="circlewrapper cw_'+w+'x'+h+' '+cls+'"></span>';
			}).after('<span class="mask"></span>');
					});
//				}
		} else {
			var h = img.height();
			try {
				if (!h || h<10) {
					throw('Not all reqs was loaded..'); // не загрузились, кидаем исключение
				} else {
					img.css({'border-radius': h/2+'px'});
				}
			} catch(e) {
				$(window).load(function(){
					img.css({'border-radius': img.height()/2+'px'});
				});
			}
		}
	});
}
//end of closure
})(jQuery);

(function($) { //create closure
$.fn.blogcarousel = function(options) {
	this.each(function(){
		var bc = $(this);
		bc.children('div').each(function(){
			var cont = $(this), li = cont.children('.pic'), lil = li.length;
			cont.after('<div class="statblock"><a href="#" class="previmg">предыдущая</a><span class="stat"><span>1</span> / '+lil+'</span><a href="#" class="nextimg">слудующая</a></div>');
		});
		bc.gallery();
		
	});
}
//end of closure
})(jQuery);

(function($) {

	$.fn.gallery = function(options) {

		return this.each(function() {
			var cont = $(this),
				o = $.extend({}, $.fn.gallery.defaults, options, cont.data('blogcarousel')),
				frame = $('div:first-child', cont),
				pics = $('.pic', cont),
				active = $('.pic:nth-child(1)', cont), // by default the active pic is the first one
				prev = $('.previmg', cont),
				next = $('.nextimg', cont),
				w = o.frameWidth,
				l='',
				hi = Math.max(pics.find('img').height()),
				wi = Math.max(pics.find('img').width());
			
			init()
			function init() {
				// We don't need this if there's only one pic
				if (pics.length <= 1) {
					return false;
				}

				prepare();
				bindHandlers();
			};

			// Preparations
			function prepare() {
				active.addClass('active');
				prev.addClass('disable');
				frame.height(hi);
				frame.width(wi);
				pics.height(hi);
				pics.width(wi);
				pics.each(function(){
					$(this).find('img').css({marginTop: -$(this).find('img').height()/2, marginLeft: -$(this).find('img').width()/2});
				});
				pics.find('img').hide();
				active.find('img').show();
			};

			// Bind prev/next/pic click handlers
			function bindHandlers() {
				next.add(prev).on('click', cont, function() {
					if ($(this).hasClass('disable')) {
						return false;
					}
					
					active = $(this).hasClass('nextimg') ? active.next() : $(this).hasClass('previmg') ? active.prev() : active;
					if($(this).hasClass('nextimg'))
					{
						l='100%';
					}else if ($(this).hasClass('previmg'))
					{
						l='-200%';
					}
					pics.find('img').hide();
					changePic();
					return false;
				});
			};

			// Changes pic for the one, which is contained in active variable
			function changePic() {
					pics.removeClass('active');
					active.addClass('active');
					var ind = active.index();
					$('.inner').css({'overflow': 'hidden'});
					active.find('img').css({left: l, height: active.find('img').height()*5, width: active.find('img').width()*5});
					active.find('img').show().animate({left: '50%', height: active.find('img').height()/5, width: active.find('img').width()/5}, 450, function(){
						$('.inner').removeAttr('style');
					});
					$('.statblock').find('.stat span').text(ind+1);
					checkDisabled();
			};
			
			// Checks if prev/next are needed
			function checkDisabled() {
				if (active.is(':last-child')) {
					next.addClass('disable');
				} else {
					next.removeClass('disable');
				}

				if (active.is(':first-child')) {
					prev.addClass('disable');
				} else {
					prev.removeClass('disable');
				}
			};

		});

	};
	$.fn.gallery.defaults = {
		frameWidth: 940
	};


})(jQuery);


(function($) {

	$.fn.loadMore = function(options) {

		return this.each(function() {
			var cont = $(this),
				o = $.extend({}, $.fn.loadMore.defaults, options, cont.data('loadMore')),
				obj = o.obj,
				par = o.par,
				link = $('.more', cont);
			
			link
				.off('click.loadMore')
				.on('click.loadMore', cont, function(e) {
					e.preventDefault();
					var el = $(this),
						url = el.attr('href');
					el.addClass('wait');
					$.ajax(url).always(function() {
						el.removeClass('wait')
					}).success(function(data) {
						cont.find(o.obj).last().before(data);
					}).fail(function() {

					});
				});

		});

	};

	$.fn.loadMore.defaults = {
		par: false,
		obj: '.line'
	};

})(jQuery);









